#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

#define MAX_DESTINATIONS 30
#define INF 999999

// Structure to represent a destination
struct Destination {
    char name[50];
};

// Graph representation using adjacency matrix
struct Graph {
    int numDestinations;
    int adjacencyMatrix[MAX_DESTINATIONS][MAX_DESTINATIONS];
    struct Destination destinations[MAX_DESTINATIONS];
};

// Initialize graph
void initializeGraph(struct Graph *graph) {
    graph->numDestinations = 0;
    for (int i = 0; i < MAX_DESTINATIONS; i++) {
        for (int j = 0; j < MAX_DESTINATIONS; j++) {
            graph->adjacencyMatrix[i][j] = INF;
        }
    }
}

// Add a new destination to the graph
void addDestination(struct Graph *graph, char *name) {
    strcpy(graph->destinations[graph->numDestinations].name, name);
    graph->numDestinations++;
}

// Add an edge between two destinations with a given weight
void addEdge(struct Graph *graph, int source, int destination, int weight) {
    graph->adjacencyMatrix[source][destination] = weight;
    graph->adjacencyMatrix[destination][source] = weight;
}

// Display all destinations
void displayDestinations(struct Graph *graph) {
    printf("Available Destinations:\n");
    for (int i = 0; i < graph->numDestinations; i++) {
        printf("%d. %s\n", i + 1, graph->destinations[i].name);
    }
}

// Prim's algorithm to find the minimum spanning tree
int primMST(struct Graph *graph, int source, int destination, int *prev) {
    int dist[MAX_DESTINATIONS];
    bool visited[MAX_DESTINATIONS];
    for (int i = 0; i < graph->numDestinations; i++) {
        dist[i] = INF;
        visited[i] = false;
        prev[i] = -1;
    }

    dist[source] = 0;

    for (int count = 0; count < graph->numDestinations - 1; count++) {
        int minDist = INF, minIndex;
        for (int v = 0; v < graph->numDestinations; v++) {
            if (!visited[v] && dist[v] < minDist) {
                minDist = dist[v];
                minIndex = v;
            }
        }

        visited[minIndex] = true;
        for (int v = 0; v < graph->numDestinations; v++) {
            if (!visited[v] && graph->adjacencyMatrix[minIndex][v] &&
                dist[minIndex] != INF && graph->adjacencyMatrix[minIndex][v] < dist[v]) {
                dist[v] = graph->adjacencyMatrix[minIndex][v];
                prev[v] = minIndex;
            }
        }
    }
    return dist[destination];
}

// Function to print shortest path 
void printShortestPath(struct Graph *graph, int source, int destination, int *prev) {
    printf("Shortest path from %s to %s: ", graph->destinations[source].name, graph->destinations[destination].name);
    int current = destination;
    while (current != -1) {
        printf("%s ", graph->destinations[current].name);
        if (prev[current] != -1) {
            printf(" --> ");
        }
        current = prev[current];
    }
    printf("\n");
}

int calculateTotalCost(int distance, int mode) {
    int costPerKm;
    if (mode == 1) {
        costPerKm = 1000 / 300; // Aeroplane
    } else if (mode == 2) {
        costPerKm = 1000 / 800; // Train
    } else if (mode == 3) {
        costPerKm = 1000 / 250; // Cab
    } else {
        printf("Invalid mode of transportation.\n");
        return -1;
    }
    return costPerKm * distance;
}

int main() {
    struct Graph graph;
    initializeGraph(&graph);

 // Destinations
   addDestination(&graph, "Andhra Pradesh");
    addDestination(&graph, "Arunachal Pradesh");
    addDestination(&graph, "Assam");
    addDestination(&graph, "Bihar");
    addDestination(&graph, "Chhattisgarh");
    addDestination(&graph, "Goa");
    addDestination(&graph, "Gujarat");
    addDestination(&graph, "Haryana");
    addDestination(&graph, "Himachal Pradesh");
    addDestination(&graph, "Jharkhand");
    addDestination(&graph, "Karnataka");
    addDestination(&graph, "Kerala");
    addDestination(&graph, "Madhya Pradesh");
    addDestination(&graph, "Maharashtra");
    addDestination(&graph, "Manipur");
    addDestination(&graph, "Meghalaya");
    addDestination(&graph, "Mizoram");
    addDestination(&graph, "Nagaland");
    addDestination(&graph, "Odisha");
    addDestination(&graph, "Punjab");
    addDestination(&graph, "Rajasthan");
    addDestination(&graph, "Sikkim");
    addDestination(&graph, "Tamil Nadu");
    addDestination(&graph, "Telangana");
    addDestination(&graph, "Tripura");
    addDestination(&graph, "Uttar Pradesh");
    addDestination(&graph, "Uttarakhand");
    addDestination(&graph, "West Bengal");
    addDestination(&graph, "Delhi"); 

    // edges between states with approximate distances in kilometers
    addEdge(&graph, 0, 1, 2500); // Andhra Pradesh - Arunachal Pradesh
    addEdge(&graph, 0, 2, 1800); // Andhra Pradesh - Assam
    addEdge(&graph, 0, 3, 1200); // Andhra Pradesh - Bihar
    addEdge(&graph, 0, 4, 1100); // Andhra Pradesh - Chhattisgarh
    addEdge(&graph, 1, 2, 2000); // Arunachal Pradesh - Assam
    addEdge(&graph, 1, 3, 2300); // Arunachal Pradesh - Bihar
    addEdge(&graph, 1, 4, 1300); // Arunachal Pradesh - Chhattisgarh
    addEdge(&graph, 2, 3, 1500); // Assam - Bihar
    addEdge(&graph, 2, 4, 1000); // Assam - Chhattisgarh
    addEdge(&graph, 2, 5, 800);  // Assam - Goa
    addEdge(&graph, 3, 4, 500);  // Bihar - Chhattisgarh
    addEdge(&graph, 3, 5, 2000); // Bihar - Goa
    addEdge(&graph, 4, 6, 800);  // Chhattisgarh - Gujarat
    addEdge(&graph, 4, 7, 600);  // Chhattisgarh - Haryana
    addEdge(&graph, 5, 7, 1800); // Goa - Haryana
    addEdge(&graph, 5, 8, 2000); // Goa - Himachal Pradesh
    addEdge(&graph, 6, 8, 1200); // Gujarat - Himachal Pradesh
    addEdge(&graph, 6, 9, 700);  // Gujarat - Jharkhand
    addEdge(&graph, 7, 9, 1400); // Haryana - Jharkhand
    addEdge(&graph, 7, 10, 800); // Haryana - Karnataka
    addEdge(&graph, 8, 10, 1900);// Himachal Pradesh - Karnataka
    addEdge(&graph, 8, 11, 1600);// Himachal Pradesh - Kerala
    addEdge(&graph, 9, 11, 1900);// Jharkhand - Kerala
    addEdge(&graph, 9, 12, 500); // Jharkhand - Madhya Pradesh
    addEdge(&graph, 10, 12, 1200);// Karnataka - Madhya Pradesh
    addEdge(&graph, 10, 13, 900); // Karnataka - Maharashtra
    addEdge(&graph, 11, 13, 1200);// Kerala - Maharashtra
    addEdge(&graph, 11, 14, 1700);// Kerala - Manipur
    addEdge(&graph, 12, 14, 1500);// Madhya Pradesh - Manipur
    addEdge(&graph, 12, 15, 600); // Madhya Pradesh - Meghalaya
    addEdge(&graph, 13, 15, 1600);// Maharashtra - Meghalaya
    addEdge(&graph, 13, 16, 500); // Maharashtra - Mizoram
    addEdge(&graph, 14, 16, 1100);// Manipur - Mizoram
    addEdge(&graph, 14, 17, 1800);// Manipur - Nagaland
    addEdge(&graph, 15, 17, 900); // Meghalaya - Nagaland
    addEdge(&graph, 15, 18, 1500);// Meghalaya - Odisha
    addEdge(&graph, 16, 18, 800); // Mizoram - Odisha
    addEdge(&graph, 16, 19, 1400);// Mizoram - Punjab
    addEdge(&graph, 17, 19, 1500);// Nagaland - Punjab
    addEdge(&graph, 17, 20, 1200);// Nagaland - Rajasthan
    addEdge(&graph, 18, 20, 1400);// Odisha - Rajasthan
    addEdge(&graph, 18, 21, 700); // Odisha - Sikkim
    addEdge(&graph, 19, 21, 1400);// Punjab - Sikkim
    addEdge(&graph, 19, 22, 1600);// Punjab - Tamil Nadu
    addEdge(&graph, 20, 22, 1700);// Rajasthan - Tamil Nadu
    addEdge(&graph, 20, 23, 1400);// Rajasthan - Telangana
    addEdge(&graph, 21, 23, 1200);// Sikkim - Telangana
    addEdge(&graph, 21, 24, 1500);// Sikkim - Tripura
    addEdge(&graph, 22, 24, 1600);// Tamil Nadu - Tripura
    addEdge(&graph, 22, 25, 1000);// Tamil Nadu - Uttar Pradesh
    addEdge(&graph, 23, 25, 1400);// Telangana - Uttar Pradesh
    addEdge(&graph, 23, 26, 1800);// Telangana - Uttarakhand
    addEdge(&graph, 24, 26, 1200);// Tripura - Uttarakhand
    addEdge(&graph, 24, 27, 1300);// Tripura - West Bengal
    addEdge(&graph, 25, 27, 1100);// Uttar Pradesh - West Bengal
    addEdge(&graph, 0, 28, 1700);// Andhra Pradesh - Delhi
    addEdge(&graph, 1, 28, 2500);// Arunachal Pradesh - Delhi
    addEdge(&graph, 2, 28, 2000);// Assam - Delhi
    addEdge(&graph, 3, 28, 1000);// Bihar - Delhi
    addEdge(&graph, 4, 28, 1000);// Chhattisgarh - Delhi
    addEdge(&graph, 5, 28, 2000);// Goa - Delhi
    addEdge(&graph, 6, 28, 900); // Gujarat - Delhi
    addEdge(&graph, 7, 28, 1200);// Haryana - Delhi
    addEdge(&graph, 8, 28, 1300);// Himachal Pradesh - Delhi
    addEdge(&graph, 9, 28, 1100);// Jharkhand - Delhi
    addEdge(&graph, 10, 28, 2100);// Karnataka - Delhi
    addEdge(&graph, 11, 28, 2400);// Kerala - Delhi
    addEdge(&graph, 12, 28, 900); // Madhya Pradesh - Delhi
    addEdge(&graph, 13, 28, 1200);// Maharashtra - Delhi
    addEdge(&graph, 14, 28, 2200);// Manipur - Delhi
    addEdge(&graph, 15, 28, 1900);// Meghalaya - Delhi
    addEdge(&graph, 16, 28, 2300);// Mizoram - Delhi
    addEdge(&graph, 17, 28, 2400);// Nagaland - Delhi
    addEdge(&graph, 18, 28, 1600);// Odisha - Delhi
    addEdge(&graph, 19, 28, 1100);// Punjab - Delhi
    addEdge(&graph, 20, 28, 600); // Rajasthan - Delhi
    addEdge(&graph, 21, 28, 1700);// Sikkim - Delhi
    addEdge(&graph, 22, 28, 1800);// Tamil Nadu - Delhi
    addEdge(&graph, 23, 28, 1200);// Telangana - Delhi
    addEdge(&graph, 24, 28, 2400);// Tripura - Delhi
    addEdge(&graph, 25, 28, 1000);// Uttar Pradesh - Delhi
    addEdge(&graph, 26, 28, 1300);// Uttarakhand - Delhi
    addEdge(&graph, 27, 28, 1200);// West Bengal - Delhi

    displayDestinations(&graph);

    int source, destination;
    printf("Enter the number of the source state: ");
    scanf("%d", &source);
    printf("Enter the number of the destination state: ");
    scanf("%d", &destination);

    source--;
    destination--;

    if (source < 0 || source >= graph.numDestinations || destination < 0 || destination >= graph.numDestinations) {
        printf("Invalid source or destination state.\n");
        return 1;
    }

    int prev[MAX_DESTINATIONS];
    if (graph.adjacencyMatrix[source][destination] == INF) {
        printf("No direct connection between %s and %s.\n", graph.destinations[source].name, graph.destinations[destination].name);
        printf("\n");
        int shortestDistance = primMST(&graph, source, destination, prev);
        printf("Shortest distance between %s and %s: %d kilometers\n", graph.destinations[source].name, graph.destinations[destination].name, shortestDistance);
        printShortestPath(&graph, source, destination, prev);
        printf("\n");
        printf("Choose mode of transportation:- \n 1. Aeroplane\n 2. Train\n 3. Cab \nChoose option: ");
        int mode;
        scanf("%d", &mode);
        int totalCost = calculateTotalCost(shortestDistance, mode);
        printf("Total cost for transportation: %d rupees\n", totalCost);
    } else {
        int directDistance = graph.adjacencyMatrix[source][destination];
        printf("Direct connection between %s and %s\nDistance: %d kilometers\n", graph.destinations[source].name, graph.destinations[destination].name, directDistance);
        printf("\n");
        printf("Choose mode of transportation:- \n 1. Aeroplane\n 2. Train\n 3. Cab \nChoose option: ");
        int mode;
        scanf("%d", &mode);
        int totalCost = calculateTotalCost(directDistance, mode);
        printf("Total cost for transportation: %d rupees\n", totalCost);
    }

    return 0;
}
